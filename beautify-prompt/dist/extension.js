(()=>{"use strict";var e={265:function(e,t,o){var n,i=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o);var i=Object.getOwnPropertyDescriptor(t,o);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,n,i)}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[t.length]=o);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o=n(e),a=0;a<o.length;a++)"default"!==o[a]&&i(t,e,o[a]);return r(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){p('Extension "beautify-prompt" is now active');const t=s.window.createStatusBarItem(s.StatusBarAlignment.Right,100);t.text="$(sparkle) @bp",t.tooltip="Beautify Prompt Agent (@bp) - Click to beautify prompt",t.command="beautify-prompt.bpAgentBeautify",e.subscriptions.push(t);const o=s.commands.registerCommand("beautify-prompt.beautifyPrompt",(async()=>{await async function(){const e=s.window.activeTextEditor;if(!e)return void s.window.showInformationMessage("No editor is active");const t=e.selection;if(t.isEmpty)return void s.window.showInformationMessage("Please select text to beautify");const o=e.document.getText(t),{hasPrefix:n,processedPrompt:i}=d(o);try{const o=await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Beautify prompt...",cancellable:!1},(async e=>await u(i)));e.edit((e=>{e.replace(t,o)})),s.window.showInformationMessage("Prompt beautified successfully!")}catch(e){s.window.showErrorMessage(`Failed to beautify prompt: ${e instanceof Error?e.message:String(e)}`)}}()})),n=s.commands.registerCommand("beautify-prompt.beautifyChatPrompt",(async()=>{await async function(){await s.commands.executeCommand("editor.action.clipboardCopyWithSyntaxHighlightingAction");const e=await s.env.clipboard.readText();if(!e||""===e.trim())return void s.window.showInformationMessage("No text found in the Copilot Chat input");const{hasPrefix:t,processedPrompt:o}=d(e);try{const e=await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Beautify Copilot Chat prompt...",cancellable:!1},(async e=>await u(o)));await s.env.clipboard.writeText(e),s.window.showInformationMessage("Prompt beautified! Press Ctrl+V/Cmd+V to paste it into the chat input.")}catch(e){s.window.showErrorMessage(`Failed to beautify prompt: ${e instanceof Error?e.message:String(e)}`)}}()})),i=s.commands.registerCommand("beautify-prompt.checkAutoBeautify",(async()=>{await async function(){const e=await s.env.clipboard.readText();if(!e||""===e.trim())return;const{hasPrefix:t,processedPrompt:o}=d(e);if(t)try{const e=await u(o);await s.env.clipboard.writeText(e),s.window.showInformationMessage("Auto-beautified prompt!",{modal:!1})}catch(e){console.error("Error during auto-beautification:",e)}}()})),r=s.commands.registerCommand("beautify-prompt.bpAgentBeautify",(async()=>{await async function(){const e=await s.env.clipboard.readText();if(p("BP Agent: Clipboard text retrieved",e?e.substring(0,30)+"...":"empty"),!e||""===e.trim())return void s.window.showInformationMessage("@bp agent: No text found to beautify");const t=e.toLowerCase().trim(),o="@bp";if(p("BP Agent: Checking for prefix",{lowerCasePrompt:t,startsWith:t.startsWith(o)}),t.startsWith(o))try{const t=e.substring(3).trim();console.log("BP Agent debug: Processed prompt",t);const o=await s.window.withProgress({location:s.ProgressLocation.Notification,title:"@bp agent: Beautifying prompt...",cancellable:!1},(async e=>(e.report({increment:20,message:"Analyzing prompt structure..."}),await new Promise((e=>setTimeout(e,300))),e.report({increment:30,message:"Enhancing technical details..."}),await new Promise((e=>setTimeout(e,300))),e.report({increment:30,message:"Finalizing improvements..."}),await new Promise((e=>setTimeout(e,300))),await u(t))));await s.env.clipboard.writeText(o),s.window.showInformationMessage("@bp agent: Prompt beautified! Press Ctrl+V/Cmd+V to paste.",{modal:!1,detail:"The beautified prompt is now in your clipboard"})}catch(e){s.window.showErrorMessage(`@bp agent error: ${e instanceof Error?e.message:String(e)}`)}else s.window.showInformationMessage("@bp agent: Start your prompt with @bp to beautify")}()})),a=s.commands.registerCommand("beautify-prompt.generateTemplateFile",(async()=>{await async function(){try{const e=s.workspace.workspaceFolders;if(!e||0===e.length)return void s.window.showErrorMessage("No workspace folder found. Please open a folder first.");const t=e[0],o=s.Uri.joinPath(t.uri,".github");try{await s.workspace.fs.createDirectory(o)}catch(e){p("Error creating .github directory (might already exist)",e)}const n=s.Uri.joinPath(o,"bp_actionA.md"),i='\x3c!-- Custom Prompt Template for Beautify Prompt Extension --\x3e\n\x3c!-- The {{PROMPT}} placeholder will be replaced with the original prompt text --\x3e\n\nI want you to transform this prompt into a perfectly structured and detailed prompt for coding:\n\nOriginal Request: "{{PROMPT}}"\n\nPlease enhance this request by:\n1. Adding specific programming language and framework details\n2. Breaking down the task into logical steps\n3. Specifying any necessary APIs, libraries, or dependencies\n4. Including performance considerations and edge cases\n5. Adding formatting and style preferences\n6. Requesting code comments and documentation\n7. Defining expected input/output formats\n8. Adding any necessary error handling requirements\n\nThe output should be a comprehensive prompt that will yield high-quality, well-structured, and thoroughly documented code. Focus on making the prompt precise and actionable.';try{if(await s.workspace.fs.stat(n),"Yes"!==await s.window.showWarningMessage("A custom template file already exists. Do you want to replace it?",{modal:!0},"Yes","No"))return void s.window.showInformationMessage("Template generation cancelled.")}catch(e){}await s.workspace.fs.writeFile(n,Buffer.from(i,"utf8")),s.window.showInformationMessage("Custom prompt template created successfully!",{detail:`Template file created at ${n.fsPath}`});const r=await s.workspace.openTextDocument(n);await s.window.showTextDocument(r)}catch(e){p("Error creating template file",e),s.window.showErrorMessage(`Failed to create template file: ${e instanceof Error?e.message:String(e)}`)}}()})),c=setInterval((async()=>{await async function(e){const t=await s.env.clipboard.readText();if(t!==l&&(p("BP Agent monitor: Clipboard changed",t?t.substring(0,20)+"...":"empty"),l=t),!t||""===t.trim())return void e.hide();t.toLowerCase().trim().startsWith("@bp")?(p("BP Agent monitor: @bp detected, showing status bar item"),e.show()):e.hide()}(t)}),1e3);e.subscriptions.push({dispose:()=>clearInterval(c)}),e.subscriptions.push(o),e.subscriptions.push(n),e.subscriptions.push(i),e.subscriptions.push(r),e.subscriptions.push(a)},t.deactivate=function(){};const s=a(o(398)),c=s.window.createOutputChannel("Beautify Prompt");function p(e,...t){const o=(new Date).toISOString();c.appendLine(`[${o}] ${e}`),t&&t.length>0&&c.appendLine(JSON.stringify(t,null,2))}async function u(e){const t=await async function(){try{const e=s.workspace.workspaceFolders;if(!e||0===e.length)return p("No workspace folders found"),null;for(const t of e){const e=s.Uri.joinPath(t.uri,".github","bp_actionA.md");try{p(`Attempting to read custom prompt from: ${e.fsPath}`);const t=await s.workspace.fs.readFile(e),o=Buffer.from(t).toString("utf8");return p("Custom prompt template found",o.substring(0,100)+"..."),o}catch(e){p(`Custom prompt not found in ${t.name}: ${e instanceof Error?e.message:String(e)}`)}}return p("No custom prompt template found in any workspace folder"),null}catch(e){return p("Error while reading custom prompt template",e),null}}();let o;t?(p("Using custom prompt template from .github/bp_actionA.md"),o=t.replace("{{PROMPT}}",e)):(p("Using default built-in prompt template"),o=["I need to improve this prompt for GitHub Copilot to generate better code in a software development context:",`Original prompt: "${e}"`,"Please beautify this prompt for optimal code generation by:","1. Making it more specific and clearer with precise programming terminology","2. Adding necessary technical context (language, framework, libraries, versions)","3. Indicating expected output format (function signature, class structure, code style)","4. Breaking it into logical development steps or components","5. Specifying error handling, edge cases, and performance considerations","6. Including any necessary imports, dependencies, or setup requirements","7. Mentioning testing expectations if applicable","8. Providing clarity on design patterns or architectural approaches","9. Defining variable naming conventions or code style preferences","Return only the beautified prompt text without explanations or additional text. Focus exclusively on software development context."].join("\n\n"));try{const e=await async function(e){const t=e.trim();let o=t;return t.includes("Task:")||t.includes("Goal:")||(o=`Task: ${t}`),t.includes("Context:")||t.includes("Technology:")||(o+="\n\nContext: Using the latest version of JavaScript/TypeScript with modern ES features."),t.toLowerCase().includes("javascript")||t.toLowerCase().includes("typescript")||t.toLowerCase().includes("python")||t.toLowerCase().includes("java")||t.toLowerCase().includes("c#")||(o+="\n\nLanguage: Implement this in TypeScript with strict type checking."),t.includes("Expected output:")||t.includes("Return:")||t.includes("Output:")||(o+="\n\nExpected output: Well-structured, documented code with proper types and error handling."),t.includes("Requirements:")||(o+="\n\nRequirements:",o+="\n1. Code should be maintainable and follow SOLID principles",o+="\n2. Include proper error handling for edge cases",o+="\n3. Optimize for performance where applicable",o+="\n4. Add comprehensive documentation"),t.includes("Testing:")||t.includes("tests")||(o+="\n\nTesting: Include examples of how to test the code."),t.split(" ").length<5&&(o+="\n\nPlease provide a comprehensive solution with proper architecture, error handling, and documentation comments."),await new Promise((e=>setTimeout(e,1e3))),o}(o);return e}catch(e){throw console.error("Error beautifying prompt:",e),new Error("Failed to beautify prompt. Please try again.")}}function d(e){const t=s.workspace.getConfiguration("beautify-prompt"),o=t.get("enableAutoBeautify",!0),n=t.get("autoBeautifyPrefix","beautify prompt:").toLowerCase();if(!o)return{hasPrefix:!1,processedPrompt:e};const i=e.toLowerCase();return i.startsWith(n)?{hasPrefix:!0,processedPrompt:e.substring(n.length).trim()}:i.startsWith("@bp")?{hasPrefix:!0,processedPrompt:e.substring(3).trim()}:{hasPrefix:!1,processedPrompt:e}}let l=""},398:e=>{e.exports=require("vscode")}},t={},o=function o(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,o),r.exports}(265);module.exports=o})();