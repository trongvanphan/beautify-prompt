(()=>{"use strict";var e={265:function(e,t,o){var n,i=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o);var i=Object.getOwnPropertyDescriptor(t,o);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,n,i)}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[t.length]=o);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o=n(e),a=0;a<o.length;a++)"default"!==o[a]&&i(t,e,o[a]);return r(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){console.log('Extension "beautify-prompt" is now active');const t=s.commands.registerCommand("beautify-prompt.beautifyPrompt",(async()=>{await async function(){const e=s.window.activeTextEditor;if(!e)return void s.window.showInformationMessage("No editor is active");const t=e.selection;if(t.isEmpty)return void s.window.showInformationMessage("Please select text to beautify");const o=e.document.getText(t),{hasPrefix:n,processedPrompt:i}=u(o);try{const o=await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Beautify prompt...",cancellable:!1},(async e=>await c(i)));e.edit((e=>{e.replace(t,o)})),s.window.showInformationMessage("Prompt beautified successfully!")}catch(e){s.window.showErrorMessage(`Failed to beautify prompt: ${e instanceof Error?e.message:String(e)}`)}}()})),o=s.commands.registerCommand("beautify-prompt.beautifyChatPrompt",(async()=>{await async function(){await s.commands.executeCommand("editor.action.clipboardCopyWithSyntaxHighlightingAction");const e=await s.env.clipboard.readText();if(!e||""===e.trim())return void s.window.showInformationMessage("No text found in the Copilot Chat input");const{hasPrefix:t,processedPrompt:o}=u(e);try{const e=await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Beautify Copilot Chat prompt...",cancellable:!1},(async e=>await c(o)));await s.env.clipboard.writeText(e),s.window.showInformationMessage("Prompt beautified! Press Ctrl+V/Cmd+V to paste it into the chat input.")}catch(e){s.window.showErrorMessage(`Failed to beautify prompt: ${e instanceof Error?e.message:String(e)}`)}}()})),n=s.commands.registerCommand("beautify-prompt.checkAutoBeautify",(async()=>{await async function(){const e=await s.env.clipboard.readText();if(!e||""===e.trim())return;const{hasPrefix:t,processedPrompt:o}=u(e);if(t)try{const e=await c(o);await s.env.clipboard.writeText(e),s.window.showInformationMessage("Auto-beautified prompt!",{modal:!1})}catch(e){console.error("Error during auto-beautification:",e)}}()}));e.subscriptions.push(t),e.subscriptions.push(o),e.subscriptions.push(n)},t.deactivate=function(){};const s=a(o(398));async function c(e){const t=["I need to improve this prompt for GitHub Copilot to generate better code in a software development context:",`Original prompt: "${e}"`,"Please beautify this prompt for optimal code generation by:","1. Making it more specific and clearer with precise programming terminology","2. Adding necessary technical context (language, framework, libraries, versions)","3. Indicating expected output format (function signature, class structure, code style)","4. Breaking it into logical development steps or components","5. Specifying error handling, edge cases, and performance considerations","6. Including any necessary imports, dependencies, or setup requirements","7. Mentioning testing expectations if applicable","8. Providing clarity on design patterns or architectural approaches","9. Defining variable naming conventions or code style preferences","Return only the beautified prompt text without explanations or additional text. Focus exclusively on software development context."].join("\n\n");try{const e=await async function(e){const t=e.trim();let o=t;return t.includes("Task:")||t.includes("Goal:")||(o=`Task: ${t}`),t.includes("Context:")||t.includes("Technology:")||(o+="\n\nContext: Using the latest version of JavaScript/TypeScript with modern ES features."),t.toLowerCase().includes("javascript")||t.toLowerCase().includes("typescript")||t.toLowerCase().includes("python")||t.toLowerCase().includes("java")||t.toLowerCase().includes("c#")||(o+="\n\nLanguage: Implement this in TypeScript with strict type checking."),t.includes("Expected output:")||t.includes("Return:")||t.includes("Output:")||(o+="\n\nExpected output: Well-structured, documented code with proper types and error handling."),t.includes("Requirements:")||(o+="\n\nRequirements:",o+="\n1. Code should be maintainable and follow SOLID principles",o+="\n2. Include proper error handling for edge cases",o+="\n3. Optimize for performance where applicable",o+="\n4. Add comprehensive documentation"),t.includes("Testing:")||t.includes("tests")||(o+="\n\nTesting: Include examples of how to test the code."),t.split(" ").length<5&&(o+="\n\nPlease provide a comprehensive solution with proper architecture, error handling, and documentation comments."),await new Promise((e=>setTimeout(e,1e3))),o}(t);return e}catch(e){throw console.error("Error beautifying prompt:",e),new Error("Failed to beautify prompt. Please try again.")}}function u(e){const t=s.workspace.getConfiguration("beautify-prompt"),o=t.get("enableAutoBeautify",!0),n=t.get("autoBeautifyPrefix","beautify prompt:").toLowerCase();return o&&e.toLowerCase().startsWith(n)?{hasPrefix:!0,processedPrompt:e.substring(n.length).trim()}:{hasPrefix:!1,processedPrompt:e}}},398:e=>{e.exports=require("vscode")}},t={},o=function o(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,o),r.exports}(265);module.exports=o})();