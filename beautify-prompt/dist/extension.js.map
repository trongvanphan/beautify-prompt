{"version":3,"file":"extension.js","mappings":"23BAMA,oBAAyBA,GAExBC,QAAQC,IAAI,6CAGZ,MAAMC,EAAaC,EAAOC,SAASC,gBAAgB,iCAAiCC,UACnF,MAAMC,EAASJ,EAAOK,OAAOC,iBAE7B,IAAKF,EAEJ,YADAJ,EAAOK,OAAOE,uBAAuB,uBAKtC,MAAMC,EAAYJ,EAAOI,UACzB,GAAIA,EAAUC,QAEb,YADAT,EAAOK,OAAOE,uBAAuB,iCAItC,MAAMG,EAAiBN,EAAOO,SAASC,QAAQJ,GAE/C,IAEC,MAAMK,QAAuBb,EAAOK,OAAOS,aAAa,CACvDC,SAAUf,EAAOgB,iBAAiBC,aAClCC,MAAO,sBACPC,aAAa,IACXhB,MAAOiB,SA2BbjB,eAAiCO,GAEZ,CAEnB,4EACA,qBAAqBA,KAGrB,iCACA,yCACA,8CACA,uCACA,8CACA,wBAGA,iFAIyCW,KAAK,QAE/C,IAOC,MAAMR,QAYRV,eAA0CO,GAEzC,MAAMY,EAAiBZ,EAAea,OAGtC,IAAIV,EAAiBS,EA0BrB,OAxBKA,EAAeE,SAAS,UAAaF,EAAeE,SAAS,WACjEX,EAAiB,SAASS,KAItBA,EAAeE,SAAS,cAC5BX,GAAkB,+EAIdS,EAAeE,SAAS,qBAC3BF,EAAeE,SAAS,YACxBF,EAAeE,SAAS,aACzBX,GAAkB,sFAIfS,EAAeG,MAAM,KAAKC,OAAS,IACtCb,GAAkB,mGAIb,IAAIc,SAAQC,GAAWC,WAAWD,EAAS,OAE1Cf,CACR,CA5C+BiB,CAA2BpB,GACxD,OAAOG,CACR,CAAE,MAAOkB,GAER,MADAlC,QAAQkC,MAAM,0BAA2BA,GACnC,IAAIC,MAAM,8CACjB,CACD,CA5DiBC,CAAkBvB,KAIhCN,EAAO8B,MAAKC,IACXA,EAAYC,QAAQ5B,EAAWK,MAGhCb,EAAOK,OAAOE,uBAAuB,gCACtC,CAAE,MAAOwB,GACR/B,EAAOK,OAAOgC,iBAAiB,6BAA6BN,aAAiBC,MAAQD,EAAMO,QAAUC,OAAOR,KAC7G,KAGDnC,EAAQ4C,cAAcC,KAAK1C,EAC5B,EAGA,wBAA8B,EApD9B,iB,UCFA2C,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://beautify-prompt/./src/extension.ts","webpack://beautify-prompt/external commonjs \"vscode\"","webpack://beautify-prompt/webpack/bootstrap","webpack://beautify-prompt/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\tconsole.log('Extension \"beautify-prompt\" is now active');\n\n\t// Register the enhancePrompt command\n\tconst disposable = vscode.commands.registerCommand('beautify-prompt.enhancePrompt', async () => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\n\t\tif (!editor) {\n\t\t\tvscode.window.showInformationMessage('No editor is active');\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the selected text\n\t\tconst selection = editor.selection;\n\t\tif (selection.isEmpty) {\n\t\t\tvscode.window.showInformationMessage('Please select text to enhance');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst originalPrompt = editor.document.getText(selection);\n\t\t\n\t\ttry {\n\t\t\t// Show a progress notification\n\t\t\tconst enhancedPrompt = await vscode.window.withProgress({\n\t\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\t\ttitle: \"Enhancing prompt...\",\n\t\t\t\tcancellable: false\n\t\t\t}, async (progress) => {\n\t\t\t\t// Call our prompt enhancer function\n\t\t\t\treturn await enhancePromptText(originalPrompt);\n\t\t\t});\n\t\t\t\n\t\t\t// Replace the selected text with the enhanced prompt\n\t\t\teditor.edit(editBuilder => {\n\t\t\t\teditBuilder.replace(selection, enhancedPrompt);\n\t\t\t});\n\t\t\t\n\t\t\tvscode.window.showInformationMessage('Prompt enhanced successfully!');\n\t\t} catch (error) {\n\t\t\tvscode.window.showErrorMessage(`Failed to enhance prompt: ${error instanceof Error ? error.message : String(error)}`);\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n/**\n * Enhances a GitHub Copilot prompt to make it more effective\n * @param originalPrompt The original user prompt text\n * @returns Enhanced prompt text\n */\nasync function enhancePromptText(originalPrompt: string): Promise<string> {\n\t// Creating an enhanced version of the prompt\n\tconst promptParts = [\n\t\t// Start with a clear definition of what we're enhancing\n\t\t\"I need to improve this prompt for GitHub Copilot to generate better code:\",\n\t\t`Original prompt: \"${originalPrompt}\"`,\n\t\t\n\t\t// Add enhancer instructions\n\t\t\"Please enhance this prompt by:\",\n\t\t\"1. Making it more specific and clearer\",\n\t\t\"2. Adding necessary context and constraints\",\n\t\t\"3. Indicating expected output format\",\n\t\t\"4. Breaking it into logical steps if needed\",\n\t\t\"5. Removing ambiguity\",\n\t\t\n\t\t// Request format\n\t\t\"Return only the enhanced prompt text without explanations or additional text.\"\n\t];\n\t\n\t// Construct prompt for language model\n\tconst enhancedPromptRequest = promptParts.join(\"\\n\\n\");\n\t\n\ttry {\n\t\t// Here we would ideally call the GitHub Copilot API directly\n\t\t// Since there's no direct API for prompt enhancement, we're implementing a local enhancer\n\t\t\n\t\t// For now, we'll implement a simple enhancement logic\n\t\t// In a production extension, you might want to use a proper AI service API\n\t\t\n\t\tconst enhancedPrompt = await simulateCopilotEnhancement(originalPrompt);\n\t\treturn enhancedPrompt;\n\t} catch (error) {\n\t\tconsole.error('Error enhancing prompt:', error);\n\t\tthrow new Error('Failed to enhance prompt. Please try again.');\n\t}\n}\n\n/**\n * Simulates GitHub Copilot's prompt enhancement\n * In a real extension, this could be replaced with a call to an actual API\n */\nasync function simulateCopilotEnhancement(originalPrompt: string): Promise<string> {\n\t// Simple enhancements for demonstration\n\tconst improvedPrompt = originalPrompt.trim();\n\t\n\t// Add structure if not present\n\tlet enhancedPrompt = improvedPrompt;\n\t\n\tif (!improvedPrompt.includes('Task:') && !improvedPrompt.includes('Goal:')) {\n\t\tenhancedPrompt = `Task: ${improvedPrompt}`;\n\t}\n\t\n\t// Add context section if missing\n\tif (!improvedPrompt.includes('Context:')) {\n\t\tenhancedPrompt += '\\n\\nContext: I\\'m working with the latest version of the language/framework.';\n\t}\n\t\n\t// Add expected output if missing\n\tif (!improvedPrompt.includes('Expected output:') && \n\t\t!improvedPrompt.includes('Return:') &&\n\t\t!improvedPrompt.includes('Output:')) {\n\t\tenhancedPrompt += '\\n\\nExpected output: Well-structured, documented code that follows best practices.';\n\t}\n\t\n\t// Add specificity if the prompt is very short\n\tif (improvedPrompt.split(' ').length < 5) {\n\t\tenhancedPrompt += '\\n\\nPlease provide a comprehensive solution with appropriate error handling and comments.';\n\t}\n\t\n\t// Simulate API call delay\n\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\n\treturn enhancedPrompt;\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","async","editor","window","activeTextEditor","showInformationMessage","selection","isEmpty","originalPrompt","document","getText","enhancedPrompt","withProgress","location","ProgressLocation","Notification","title","cancellable","progress","join","improvedPrompt","trim","includes","split","length","Promise","resolve","setTimeout","simulateCopilotEnhancement","error","Error","enhancePromptText","edit","editBuilder","replace","showErrorMessage","message","String","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}